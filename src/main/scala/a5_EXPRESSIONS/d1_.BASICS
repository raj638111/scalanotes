
Terminology
----------------------------------------------------------------------

	# Also called as 'for comprehension' #37
	# Supports Nested iteration, Filtering & Value binding
	
	#** Range : Used to iterate over series of numbers
		#* Created using 'to' & 'until' operator
		#* 'to' operator 	: Creates Inclusive List
		#* 'until' operator : Creates Exclusive List

Syntax (For Loop )
----------------------------------------------------------------------

	for (<identifier> <- <iterator>) [yield] [<expression>] #37
	
	# NOTE 
		# When 'yield' keyword is used, the return value of every expression  #38 
		  that gets invoked will be returned as a Collection 
		# Braces {} can also be used instead of parentheses () #Example #39


Syntax (<iterator> / Numeric range)
----------------------------------------------------------------------
  
    <starting integer> [to|until] <ending integer> [by increment] #37

	 
Example
----------------------------------------------------------------------
 
    Without 'yield' 
    ----------------
    	#38
    	scala> for (x <- 1 to 7) { println(s"Day $x:") }
    	Day 1:
    	...
    
    With 'yield'
    ------------
    
    	#38
    	scala> for (x <- 1 to 7) yield { s"Day $x:" }
    	res10: scala.collection.immutable.IndexedSeq[String] = Vector(Day 1:,
    	Day 2:, Day 3:, Day 4:, Day 5:, Day 6:, Day 7:)	 
    
    	scala> for (day <- res0) print(day + ", ")
    	Day 1:, Day 2:, Day 3:, Day 4:, Day 5:, Day 6:, Day 7:,